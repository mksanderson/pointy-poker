#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîÑ Setting up production environment...');

const envProdPath = path.join(__dirname, '..', 'src', 'environments', 'environment.prod.ts');
const envDevPath = path.join(__dirname, '..', 'src', 'environments', 'environment.ts');

// Read environment variables
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå Error: SUPABASE_URL and SUPABASE_ANON_KEY environment variables must be set');
    process.exit(1);
}

console.log('üìù Injecting environment variables into production config...');
console.log(`   SUPABASE_URL: ${supabaseUrl}`);
console.log(`   SUPABASE_ANON_KEY: ${supabaseKey.substring(0, 20)}...`);

// Clean production environment content
const envProdContent = `// src/environments/environment.prod.ts (Generated by Netlify build)
export const environment = {
  production: true,
  supabaseUrl: '${supabaseUrl}',
  supabaseKey: '${supabaseKey}'
};
`;

// Clean development environment content (fallback if corrupted)
const envDevContent = `// src/environments/environment.ts (Development)
export const environment = {
  production: false,
  supabaseUrl: '${supabaseUrl}',
  supabaseKey: '${supabaseKey}'
};
`;

try {
    // Always write production file
    fs.writeFileSync(envProdPath, envProdContent, 'utf8');
    console.log('‚úÖ Production environment file created successfully');

    // Check if development file exists and is readable
    try {
        const devContent = fs.readFileSync(envDevPath, 'utf8');
        // Check if the file looks corrupted (contains syntax errors)
        if (devContent.includes("''https://") || devContent.includes("''eyJ") || !devContent.includes('supabaseKey:')) {
            console.log('‚ö†Ô∏è  Development environment file appears corrupted, fixing...');
            fs.writeFileSync(envDevPath, envDevContent, 'utf8');
            console.log('‚úÖ Development environment file fixed');
        } else {
            console.log('‚úÖ Development environment file looks good');
        }
    } catch (error) {
        console.log('‚ö†Ô∏è  Development environment file missing or unreadable, creating...');
        fs.writeFileSync(envDevPath, envDevContent, 'utf8');
        console.log('‚úÖ Development environment file created');
    }

    // Verify the production file was written correctly
    const writtenContent = fs.readFileSync(envProdPath, 'utf8');
    console.log('üìã Generated production environment:');
    console.log(writtenContent);

} catch (error) {
    console.error('‚ùå Failed to write environment files:', error);
    process.exit(1);
}
